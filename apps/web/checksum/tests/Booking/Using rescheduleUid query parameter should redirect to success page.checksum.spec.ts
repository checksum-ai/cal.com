/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { randomString } from "@calcom/lib/random";

import { test, defineChecksumTest, checksumAI, expect } from "../../fixtures";

test(
  defineChecksumTest(
    "Using rescheduleUid query parameter should redirect to success page",
    "DISABLED_CANCEL_003"
  ),
  {
    annotation: {
      type: "IntentionallyBroken",
      description: {
        change: "Changed success page locator from `data-testid=success-page` to `data-testid=success`",
        shouldAutoRecover: true,
      },
    },
  },
  async ({ page, users, variableStore }) => {
    await checksumAI("Create a user with disabled cancellation and rescheduling event type", async () => {
      variableStore.user = await users.create({
        name: `Test-user-${randomString(4)}`,
        eventTypes: [
          {
            title: "No Cancel No Reschedule",
            slug: "no-cancel-no-reschedule",
            length: 30,
            disableCancelling: true,
            disableRescheduling: true,
          },
        ],
      });
    });

    await checksumAI("Navigate to the event type booking page", async () => {
      await page.goto(`/${variableStore.user.username}/no-cancel-no-reschedule`);
    });

    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });

    await checksumAI("Fill in the attendee name", async () => {
      await page.fill('[name="name"]', "Test-user-1");
    });

    await checksumAI("Fill in the attendee email address", async () => {
      await page.fill('[name="email"]', "test-booker@example.com");
    });

    await checksumAI("Add notes for the meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });

    await checksumAI("Confirm the booking by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-book-button"]');
    });

    await expect(
      page.locator("[data-testid=success-page]"),
      "The booking success page should be visible after confirming the booking"
    ).toBeVisible();

    await checksumAI("Extract the booking ID from the URL", async () => {
      const url = new URL(page.url());
      const pathSegments = url.pathname.split("/");
      variableStore.bookingId = pathSegments[pathSegments.length - 1];
    });

    await checksumAI("Navigate to the event type with rescheduleUid query parameter", async () => {
      await page.goto(
        `/${variableStore.user.username}/no-cancel-no-reschedule?rescheduleUid=${variableStore.bookingId}`
      );
    });

    await expect(
      page.locator("[data-testid=success]"),
      "The success page should be visible when using rescheduleUid query parameter"
    ).toBeVisible();

    await expect(
      page,
      "The page should redirect to the booking page when using rescheduleUid query parameter"
    ).toHaveURL((url) => url.pathname === `/booking/${variableStore.bookingId}`);
  }
);
