/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { randomString } from "@calcom/lib/random";

import { test, defineChecksumTest, checksumAI, expect } from "../../fixtures";

test.skip(
  defineChecksumTest("Free user cannot book same slot multiple times", "FREE_DUP_001"),
  async ({ page, users, emails }) => {
    let freeUser: any;
    let user: any;
    let bookingUrl: string;

    await checksumAI("Create a free user for testing duplicate booking prevention", async () => {
      const freeUserObj = { name: `Free-user-${randomString(3)}` };
      freeUser = await users.create(freeUserObj);
      user = await users.get()[0];
    });

    await checksumAI("Navigate to the free user's booking page", async () => {
      await page.goto(`/${freeUser.username}`);
    });

    await checksumAI("Click on the first event type to start booking", async () => {
      await page.click('[data-testid="event-type-link"]');
    });

    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });

    await checksumAI("Fill in the attendee name", async () => {
      const bookerObj = {
        email: users.trackEmail({ username: "testEmail", domain: "example.com" }),
        name: "testBooker",
      };
      await page.fill('[name="name"]', bookerObj.name);
    });

    await checksumAI("Fill in the attendee email address", async () => {
      const bookerObj = {
        email: users.trackEmail({ username: "testEmail", domain: "example.com" }),
        name: "testBooker",
      };
      await page.fill('[name="email"]', bookerObj.email);
    });

    await checksumAI("Add notes for the meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });

    await checksumAI("Confirm the booking by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-book-button"]');
    });

    await expect(
      page.locator("[data-testid=success-page]"),
      "The booking success page should be visible after confirming the booking"
    ).toBeVisible();

    await checksumAI("Save the booking URL for duplicate booking test", async () => {
      bookingUrl = page.url();
      const { title: eventTitle } = await user.getFirstEventAsOwner();
    });

    await checksumAI("Navigate back to the same booking URL to attempt duplicate booking", async () => {
      await page.goto(bookingUrl);
    });

    await expect(
      page.locator('[data-testid="booking-fail"]'),
      "The booking should fail when attempting to book the same slot again"
    ).toBeVisible();
  }
);
