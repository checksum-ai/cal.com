/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { checksumAI, defineChecksumTest, expect, test } from "../../fixtures";

test(
  defineChecksumTest(
    "Can cancel recently created booking and rebook the same timeslot",
    "PRO_CANCEL_REBOOK_001"
  ),
  {},
  async ({ page, users }, testInfo) => {
    // Because it tests the entire booking flow + the cancellation + rebooking
    test.setTimeout(testInfo.timeout * 3);
    let pro: any;
    await checksumAI("Create a pro user for testing cancel and rebook functionality", async () => {
      pro = await users.create();
    });
    await checksumAI("Navigate to the pro user's booking page", async () => {
      await page.goto(`/${pro.username}`);
    });
    await checksumAI("Click on the first event type to start booking", async () => {
      await page.click('[data-testid="event-type-link"]');
    });
    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });
    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });
    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });
    await checksumAI("Fill in the attendee name", async () => {
      await page.fill('[name="name"]', "Test User");
    });
    await checksumAI("Fill in the attendee email address", async () => {
      await page.fill('[name="email"]', "test@example.com");
    });
    await checksumAI("Add notes for the meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });
    await checksumAI("Confirm the booking by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-book-button"]');
    });
    await expect(
      page.locator("[data-testid=success-page]"),
      "The booking success page should be visible after confirming the booking"
    ).toBeVisible();
    await expect(
      page.locator(`[data-testid="user-email-test@example.com"]`),
      "The attendee email should be displayed on the success page"
    ).toHaveText("test@example.com");
    await expect(
      page.locator(`[data-testid="attendee-name-Test User"]`),
      "The attendee name should be displayed on the success page"
    ).toHaveText("Test User");
    await checksumAI("Login as the pro user to access booking management", async () => {
      await pro.apiLogin();
    });
    await checksumAI("Navigate to the upcoming bookings page", async () => {
      await page.goto("/bookings/upcoming");
    });
    await checksumAI("Open the actions dropdown for the first booking", async () => {
      await page.locator('[data-testid="booking-actions-dropdown"]').nth(0).click();
    });
    await checksumAI("Click the cancel option from the dropdown menu", async () => {
      await page.locator('[data-testid="cancel"]').click();
    });
    await checksumAI("Wait for the cancellation page to load", async () => {
      await page.waitForURL((url) => {
        return url.pathname.startsWith("/booking/");
      });
    });
    await checksumAI("Fill in the cancellation reason", async () => {
      await page.locator('[data-testid="cancel_reason"]').fill("Test reason");
    });
    await checksumAI("Confirm the cancellation by clicking the confirm button", async () => {
      await page.locator('[data-testid="confirm_cancel"]').click();
    });
    await expect(
      page.locator('[data-testid="cancelled-headline"]'),
      "The cancellation confirmation should be visible after cancelling the booking"
    ).toBeVisible();
    await expect(
      page.locator(`[data-testid="attendee-email-test@example.com"]`),
      "The attendee email should still be displayed on the cancelled booking page"
    ).toHaveText("test@example.com");
    await expect(
      page.locator(`[data-testid="attendee-name-Test User"]`),
      "The attendee name should still be displayed on the cancelled booking page"
    ).toHaveText("Test User");
    await checksumAI("Navigate back to the pro user's booking page to rebook", async () => {
      await page.goto(`/${pro.username}`);
    });
    await checksumAI("Click on the first event type to start rebooking", async () => {
      await page.click('[data-testid="event-type-link"]');
    });
    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });
    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });
    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });
    await checksumAI("Fill in the attendee name for rebooking", async () => {
      await page.fill('[name="name"]', "Test User");
    });
    await checksumAI("Fill in the attendee email address for rebooking", async () => {
      await page.fill('[name="email"]', "test@example.com");
    });
    await checksumAI("Add notes for the rebooked meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });
    await checksumAI("Confirm the rebooking by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-book-button"]');
    });
    await expect(
      page.locator("[data-testid=success-page]"),
      "The booking success page should be visible after confirming the rebooking"
    ).toBeVisible();
  }
);
