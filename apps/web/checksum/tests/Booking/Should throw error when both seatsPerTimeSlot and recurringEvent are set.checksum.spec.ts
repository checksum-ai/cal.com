/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { randomString } from "@calcom/lib/random";

import { test, defineChecksumTest, checksumAI, expect } from "../../fixtures";

test(
  defineChecksumTest(
    "Should throw error when both seatsPerTimeSlot and recurringEvent are set",
    "SEATS_RECURRENCE_001"
  ),
  {
    annotation: {
      type: "IntentionallyBroken",
      description: {
        change:
          "Changed expected error message text to a similar but different one to simulate a test expecting the wrong error message.",
        shouldAutoRecover: true,
      },
    },
  },
  async ({ page, users }) => {
    let user: any;

    await checksumAI("Create a user with conflicting seats and recurrence event type", async () => {
      user = await users.create({
        name: `Test-user-${randomString(4)}`,
        eventTypes: [
          {
            title: "Seats With Recurrence",
            slug: "seats-with-recurrence",
            length: 30,
            seatsPerTimeSlot: 3,
            recurringEvent: {
              freq: 1,
              count: 4,
              interval: 1,
            },
          },
        ],
      });
    });

    await checksumAI("Navigate to the event type booking page", async () => {
      await page.goto(`/${user.username}/seats-with-recurrence`);
    });

    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });

    await checksumAI("Fill in the attendee name", async () => {
      await page.locator('[name="name"]').fill("Test name");
    });

    await checksumAI("Fill in the attendee email address", async () => {
      await page.locator('[name="email"]').fill(`${randomString(4)}@example.com`);
    });

    await checksumAI("Click the confirm book button to trigger the error", async () => {
      page.locator("[data-testid=confirm-book-button]").click();
    });

    await expect(
      page.locator("[data-testid=booking-fail]"),
      "The booking fail alert should be visible when seats and recurrence conflict"
    ).toBeVisible();

    await expect(
      page.locator("[data-testid=booking-fail]"),
      "The error message should contain the correct explanation about seats and recurrence conflict"
    ).toContainText("Seats feature is not compatible with recurring events");
  }
);
