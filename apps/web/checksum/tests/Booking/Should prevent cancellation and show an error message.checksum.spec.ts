/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { randomString } from "@calcom/lib/random";

import { checksumAI, defineChecksumTest, expect, test } from "../../fixtures";

test(
  defineChecksumTest("Should prevent cancellation and show an error message", "DISABLED_CANCEL_004"),
  {},
  async ({ page, users, variableStore }) => {
    await checksumAI("Create a user with disabled cancellation and rescheduling event type", async () => {
      variableStore.user = await users.create({
        name: `Test-user-${randomString(4)}`,
        eventTypes: [
          {
            title: "No Cancel No Reschedule",
            slug: "no-cancel-no-reschedule",
            length: 30,
            disableCancelling: true,
            disableRescheduling: true,
          },
        ],
      });
    });
    await checksumAI("Navigate to the event type booking page", async () => {
      await page.goto(`/${variableStore.user.username}/no-cancel-no-reschedule`);
    });
    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });
    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });
    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });
    await checksumAI("Fill in the attendee name", async () => {
      await page.fill('[name="name"]', "Test-user-1");
    });
    await checksumAI("Fill in the attendee email address", async () => {
      await page.fill('[name="email"]', "test-booker@example.com");
    });
    await checksumAI("Add notes for the meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });
    await checksumAI("Confirm the booking by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-book-button"]');
    });
    await expect(
      page.locator("[data-testid=success-page]"),
      "The booking success page should be visible after confirming the booking"
    ).toBeVisible();
    await checksumAI("Extract the booking ID from the URL", async () => {
      const url = new URL(page.url());
      const pathSegments = url.pathname.split("/");
      variableStore.bookingId = pathSegments[pathSegments.length - 1];
    });
    await checksumAI("Attempt to cancel the booking via API request", async () => {
      variableStore.response = await page.request.post("/api/cancel", {
        data: {
          uid: variableStore.bookingId,
        },
        headers: {
          "Content-Type": "application/json",
        },
      });
    });
    await expect(variableStore.response.status(), "Response should be a bad request").toBe(400);
    const responseBody = await variableStore.response.json();
    await expect(
      responseBody.message,
      "Expect message saying that this event type does not allow cancellation"
    ).toEqual("This event type doesn't allow cancellations");
  }
);
