/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { test, defineChecksumTest, checksumAI, expect } from "../../fixtures";

test.skip(
  defineChecksumTest(
    "Can book an event that requires confirmation and then accept by organizer",
    "PRO_CONFIRM_001"
  ),
  {
    annotation: {
      type: "IntentionallyBroken",
      description:
        'Changed locator from \'[data-testid="event-type-link"]:has-text("Opt in")\' to \'[data-testid="event-type-link-broken"]:has-text("Opt in")\' to simulate a component refactor where the selector was updated.',
    },
  },
  async ({ page, users }) => {
    let pro: any;

    await checksumAI("Create a pro user for testing confirmation booking functionality", async () => {
      pro = await users.create();
    });

    await checksumAI("Navigate to the pro user's booking page", async () => {
      await page.goto(`/${pro.username}`);
    });

    await checksumAI("Click on the opt-in event type that requires confirmation", async () => {
      await page.locator('[data-testid="event-type-link-broken"]:has-text("Opt in")').click();
    });

    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });

    await checksumAI("Fill in the attendee name", async () => {
      await page.fill('[name="name"]', "Test User");
    });

    await checksumAI("Fill in the attendee email address", async () => {
      await page.fill('[name="email"]', "test@example.com");
    });

    await checksumAI("Add notes for the meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });

    await checksumAI("Confirm the booking by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-book-button"]');
    });

    await expect(
      page.locator("[data-testid=success-page]"),
      "The booking success page should be visible after confirming the booking"
    ).toBeVisible();

    await checksumAI("Login as the organizer to access unconfirmed bookings", async () => {
      await pro.apiLogin();
    });

    await checksumAI("Navigate to the unconfirmed bookings page", async () => {
      await page.goto("/bookings/unconfirmed");
    });

    await checksumAI("Confirm the booking by clicking the confirm button", async () => {
      await Promise.all([
        page.click('[data-testid="confirm"]'),
        page.waitForResponse((response) => response.url().includes("/api/trpc/bookings/confirm")),
      ]);
    });

    await expect(
      page.locator('[data-testid="empty-screen"]'),
      "The empty screen should be visible after confirming the only unconfirmed booking"
    ).toBeVisible();
  }
);
