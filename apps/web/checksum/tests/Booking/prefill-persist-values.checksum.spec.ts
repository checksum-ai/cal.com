/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { test, defineChecksumTest, checksumAI, expect } from "../../fixtures";

test(
  defineChecksumTest(
    "Persist the field values when going back and coming back to the booking form",
    "PREFILL_PERSIST_001"
  ),
  {
    annotation: {
      type: "IntentionallyBroken",
      description:
        "Changed assertion for the name field to expect the wrong value ('Jane Doe' instead of 'John Doe') to simulate a test expecting the wrong persisted value.",
    },
  },
  async ({ page, users }) => {
    await checksumAI("Navigate to the booking page", async () => {
      await page.goto("/pro/30min");
    });

    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Select the first available time slot", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });

    await checksumAI("Fill in the attendee name", async () => {
      await page.fill('[name="name"]', "John Doe");
    });

    await checksumAI("Fill in the attendee email address", async () => {
      await page.fill('[name="email"]', "john@example.com");
    });

    await checksumAI("Add notes for the meeting", async () => {
      await page.fill('[name="notes"]', "Test notes");
    });

    await checksumAI("Click the back button to return to the previous step", async () => {
      await page.click('[data-testid="back"]');
    });

    await checksumAI("Navigate to next month again to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar again", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Select the first available time slot again", async () => {
      await page.locator('[data-testid="time"]').nth(0).click();
    });

    await expect(
      page.locator('[name="name"]'),
      "The name field should retain the previously entered value"
    ).toHaveValue("Jane Doe");

    await expect(
      page.locator('[name="email"]'),
      "The email field should retain the previously entered value"
    ).toHaveValue("john@example.com");

    await expect(
      page.locator('[name="notes"]'),
      "The notes field should retain the previously entered value"
    ).toHaveValue("Test notes");
  }
);
