/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import { checksumAI, defineChecksumTest, expect, test } from "../../fixtures";

test(
  defineChecksumTest("Pro user can reschedule a booking", "PRO_RESCHEDULE_001"),
  {
    annotation: {
      type: "IntentionallyBroken",
      description: {
        change: "Select the time slot for rescheduling",
      },
    },
  },
  async ({ page, users, bookings }) => {
    let pro: any;
    let eventType: any;

    await checksumAI("Create a pro user for testing rescheduling functionality", async () => {
      pro = await users.create();
    });

    await checksumAI("Create a booking for the pro user to reschedule", async () => {
      [eventType] = pro.eventTypes;
      await bookings.create(pro.id, pro.username, eventType.id);
    });

    await checksumAI("Login as the pro user to access booking management", async () => {
      await pro.apiLogin();
    });

    await checksumAI("Navigate to the upcoming bookings page", async () => {
      await page.goto("/bookings/upcoming", { waitUntil: "commit" });
    });

    await checksumAI("Open the actions dropdown for the first booking", async () => {
      await page.locator('[data-testid="booking-actions-dropdown"]').nth(0).click();
    });

    await checksumAI("Click the reschedule option from the dropdown menu", async () => {
      await page.locator('[data-testid="reschedule"]').click();
    });

    await checksumAI("Wait for the URL to contain the reschedule booking ID", async () => {
      await page.waitForURL((url) => {
        const bookingId = url.searchParams.get("rescheduleUid");
        return !!bookingId;
      });
    });

    await checksumAI("Navigate to next month to find available time slots", async () => {
      await page.click('[data-testid="incrementMonth"]');
    });

    await checksumAI("Select the first available day in the calendar", async () => {
      await page.locator('[data-testid="day"][data-disabled="false"]').nth(0).click();
    });

    await checksumAI("Confirm the reschedule by clicking the confirm button", async () => {
      await page.click('[data-testid="confirm-reschedule-button"]');
    });

    await expect(
      page,
      "The page should redirect to the booking page after successful rescheduling"
    ).toHaveURL((url) => {
      return url.pathname.startsWith("/booking");
    });
  }
);
