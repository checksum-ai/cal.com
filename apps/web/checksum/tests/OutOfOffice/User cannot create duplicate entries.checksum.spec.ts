/* Checksum.ai autogenerated test with custom Cal.com fixtures */
import dayjs from "@calcom/dayjs";
import prisma from "@calcom/prisma";

import { checksumAI, defineChecksumTest, expect, test } from "../../fixtures";

test(
  defineChecksumTest("User cannot create duplicate entries", "OOO_DUPLICATE_001"),
  {},
  async ({ page, users, variableStore }) => {
    await checksumAI("Create a user", async () => {
      variableStore.user = await users.create({ name: "userOne" });
    });
    await checksumAI("Login as the created user", async () => {
      await variableStore.user.apiLogin();
    });
    await checksumAI("Navigate to the out of office settings page", async () => {
      const entriesListRespPromise = page.waitForResponse(
        (response) => response.url().includes("outOfOfficeEntriesList") && response.status() === 200
      );
      await page.goto("/settings/my-account/out-of-office");
      await page.waitForLoadState("domcontentloaded");
      await entriesListRespPromise;
    });
    await checksumAI("Click the add entry button to open the out of office form", async () => {
      const reasonListRespPromise = page.waitForResponse(
        (response) => response.url().includes("outOfOfficeReasonList?batch=1") && response.status() === 200
      );
      await page.getByTestId("add_entry_ooo").click();
      await reasonListRespPromise;
    });
    await checksumAI("Click on the date range picker to select dates", async () => {
      await page.locator('[data-testid="date-range"]').click();
    });
    await checksumAI("Select dates for the first out of office entry (1st-3rd)", async () => {
      await page.locator('button[name="next-month"]').click();
      await page.locator('button[name="day"]:text-is("1")').nth(0).click();
      await page.locator('button[name="day"]:text-is("3")').nth(0).click();
    });
    await checksumAI("Select a reason for the first entry", async () => {
      await page.getByTestId("reason_select").click();
      await page.getByTestId("select-option-4").click();
    });
    await checksumAI("Save the first out of office entry", async () => {
      await page.getByTestId("create-or-edit-entry-ooo-redirect").click();
    });
    await checksumAI("Click the add entry button to create a duplicate entry", async () => {
      const reasonListRespPromise = page.waitForResponse(
        (response) => response.url().includes("outOfOfficeReasonList?batch=1") && response.status() === 200
      );
      await page.getByTestId("add_entry_ooo").click();
      await reasonListRespPromise;
    });
    await checksumAI("Click on the date range picker to select the same dates", async () => {
      await page.locator('[data-testid="date-range"]').click();
    });
    await checksumAI("Select the same dates for the duplicate entry (1st-3rd)", async () => {
      await page.locator('button[name="next-month"]').click();
      await page.locator('button[name="day"]:text-is("1")').nth(0).click();
      await page.locator('button[name="day"]:text-is("3")').nth(0).click();
    });
    await checksumAI("Select a reason for the duplicate entry", async () => {
      await page.getByTestId("reason_select").click();
      await page.getByTestId("select-option-4").click();
    });
    await checksumAI("Attempt to save the duplicate entry", async () => {
      await page.getByTestId("create-or-edit-entry-ooo-redirect").click();
    });
    await expect(
      page.locator('text="duplicate_entry_error"'),
      "An error message should appear indicating duplicate entry is not allowed"
    ).toBeTruthy();
    await checksumAI("Verify only one out of office entry was created", async () => {
      const ooo = await prisma.outOfOfficeEntry.findMany({
        where: {
          userId: variableStore.user?.id,
        },
        orderBy: {
          createdAt: "desc",
        },
        select: {
          start: true,
          end: true,
        },
      });
      expect(ooo.length).toBe(1);
      const entry = ooo[0];
      const entryFromDate = dayjs(entry.start);
      const entryToDate = dayjs(entry.end);
      expect(entryFromDate.format("DD")).toBe("01");
      expect(entryToDate.format("DD")).toBe("03");
    });
  }
);
